{"version":3,"sources":["lib/ErrorBoundary/index.tsx","components/Error/MakeError.tsx","components/Example/FallbackExample.tsx","utils.tsx","components/Example/FallbackRenderExample.tsx","components/Example/FallbackComponentExample.tsx","components/Example/ResetKeysExample.tsx","components/Example/WithErrorBoundaryExample.tsx","components/Error/AsyncError.tsx","components/Example/UseErrorHandlerExample.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["initState","error","ErrorBoundary","props","updatedWithError","reset","setState","resetErrorBoundary","onReset","state","errorInfo","this","onError","prevProps","resetKeys","onResetKeysChange","a","b","length","some","item","index","Object","is","changedArray","fallback","FallbackComponent","fallbackRender","fallbackProps","React","isValidElement","Error","children","console","log","Component","MakeError","useState","number","setNumber","useEffect","onClick","Math","random","FallbackExample","hasError","setHasError","ErrorFallback","role","message","FallbackComponentExample","retry","setRetry","WithErrorBoundaryExample","errorBoundaryProps","Wrapped","name","displayName","withErrorBoundary","info","AsyncError","handleError","givenError","setError","useErrorHandler","randomlyFetchData","then","UseErrorHandlerExample","App","className","FallbackRenderExample","ResetKeysExample","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAmCMA,EAAgC,CAAEC,MAAO,MAEzCC,E,kDAKJ,WAAYC,GAA2D,IAAD,8BACpE,cAAMA,IAFRC,sBACsE,IAiDtEC,MAAQ,WACN,EAAKD,kBAAmB,EACxB,EAAKE,SAASN,IAnDsD,EAuDtEO,mBAAqB,WAAO,IAAD,IACzB,eAAKJ,OAAMK,eAAX,iBACA,EAAKH,SAvDL,EAAKI,MAAQT,EACb,EAAKI,kBAAmB,EAH4C,E,qDA4BtE,SAAkBH,EAAcS,GAAiB,IAAD,IAE9C,aAAAC,KAAKR,OAAMS,eAAX,gBAAqBX,EAAOS,K,gCAG9B,SAAmBG,GAAmE,IAC5EZ,EAAUU,KAAKF,MAAfR,MAD2E,EAE1CU,KAAKR,MAAtCW,EAF2E,EAE3EA,UAAWC,EAFgE,EAEhEA,kBACL,OAAVd,GAAmBU,KAAKP,iBAMd,OAAVH,GArDa,WAAqD,IAApDe,EAAmD,uDAA/B,GAAIC,EAA2B,uDAAP,GAChE,OAAOD,EAAEE,SAAWD,EAAEC,QAAUF,EAAEG,MAAK,SAACC,EAAMC,GAAP,OAAkBC,OAAOC,GAAGH,EAAMH,EAAEI,OAoDnDG,CAAaX,EAAUC,UAAWA,KACrC,OAAjBC,QAAiB,IAAjBA,KAAoBF,EAAUC,UAAWA,GACzCH,KAAKN,SAPLM,KAAKP,kBAAmB,I,oBAuB5B,WAAU,IAAD,EACiDO,KAAKR,MAArDsB,EADD,EACCA,SAAUC,EADX,EACWA,kBAAmBC,EAD9B,EAC8BA,eAC7B1B,EAAUU,KAAKF,MAAfR,MAER,GAAIA,EAAO,CACT,IAAM2B,EAA+B,CACnC3B,QACAM,mBAAoBI,KAAKJ,oBAI3B,GAAIsB,IAAMC,eAAeL,GACvB,OAAOA,EAIT,GAA8B,oBAAnBE,EACT,OAAOA,EAAeC,GAIxB,GAAIF,EACF,OAAO,cAACA,EAAD,eAAuBE,IAGhC,MAAM,IAAIG,MAAM,2HAGlB,OAAOpB,KAAKR,MAAM6B,Y,uCAzEpB,SAAgC/B,GAG9B,OAFAgC,QAAQC,IAAIjC,GAEL,CAAEA,a,GAvBe4B,IAAMM,WCnClC,IAuBeC,EAvBG,WAAO,IAAD,EACMC,mBAAwB,MAD9B,mBACfC,EADe,KACPC,EADO,KActB,OAPAC,qBAAU,WAER,GAAIF,GAAUA,EAAS,GACrB,MAAM,IAAIP,MAAM,qBAEjB,CAACO,IAGF,gCACE,6CAAgBA,KAChB,wBAAQG,QAfQ,WAClB,IAAMH,EAASI,KAAKC,SACpBJ,EAAUD,IAaR,2CACA,2BCUSM,EA1BS,WAAO,IAAD,EACIP,oBAAS,GADb,mBACrBQ,EADqB,KACXC,EADW,KAc5B,OACE,cAAC,EAAD,CACErB,SAAU,qDACVb,QAdY,SAACX,GAEfgC,QAAQC,IAAIjC,GACZ6C,GAAY,IAYVtC,QATY,WACdyB,QAAQC,IAAI,wCACZY,GAAY,IAIZ,SAMID,EAA2B,KAAhB,cAAC,EAAD,OChBNE,EAAgB,SAAC,GAAkD,IAAhD9C,EAA+C,EAA/CA,MAAOM,EAAwC,EAAxCA,mBACrC,OACE,sBAAKyC,KAAK,QAAV,UACE,mDACA,8BAAM/C,EAAMgD,UACZ,wBAAQR,QAASlC,EAAjB,sDCiBSqC,EA1BS,WAAO,IAAD,EACIP,oBAAS,GADb,mBACrBQ,EADqB,KACXC,EADW,KAc5B,OACE,cAAC,EAAD,CACEnB,eAAgB,SAACC,GAAD,OAAmB,cAAC,EAAD,eAAmBA,KACtDhB,QAdY,SAACX,GAEfgC,QAAQC,IAAIjC,GACZ6C,GAAY,IAYVtC,QATY,WACdyB,QAAQC,IAAI,wCACZY,GAAY,IAIZ,SAMID,EAA2B,KAAhB,cAAC,EAAD,OCKJK,EA1BkB,WAAO,IAAD,EACLb,oBAAS,GADJ,mBAC9BQ,EAD8B,KACpBC,EADoB,KAcrC,OACE,cAAC,EAAD,CACEnB,eAAgBoB,EAChBnC,QAdY,SAACX,GAEfgC,QAAQC,IAAIjC,GACZ6C,GAAY,IAYVtC,QATY,WACdyB,QAAQC,IAAI,wCACZY,GAAY,IAIZ,SAMID,EAA2B,KAAhB,cAAC,EAAD,OCJJD,EAjBS,WAAO,IAAD,EACFP,mBAAiB,GADf,mBACrBc,EADqB,KACdC,EADc,KAG5B,OACE,gCACE,wBAAQX,QAAS,kBAAMW,EAASD,EAAQ,IAAxC,gCAEA,cAAC,EAAD,CACEzB,kBAAmBqB,EACnBjC,UAAW,CAACqC,GAFd,SAIE,cAAC,EAAD,UCLOE,EPkIf,SACElB,EACAmB,GAEA,IAAMC,EAAkC,SAAApD,GACtC,OACE,cAAC,EAAD,2BAAmBmD,GAAnB,aACE,cAACnB,EAAD,eAAehC,QAMfqD,EAAOrB,EAAUsB,aAAetB,EAAUqB,MAAQ,UAGxD,OAFAD,EAAQE,YAAR,4BAA2CD,EAA3C,KAEOD,EOvJwBG,CAAkBtB,EAAW,CAC5DV,kBAAmBqB,EACnBnC,QAAS,SAACX,EAAO0D,GAAR,OAAiB1B,QAAQC,IAAIjC,EAAO0D,M,uBC8BhCC,EAnCI,WACjB,IAAMC,ERkKR,SACEC,GACiD,IAAD,EACtBzB,mBAAmB,MADG,mBACzCpC,EADyC,KAClC8D,EADkC,KAEhD,GAAID,EAAY,MAAMA,EACtB,GAAI7D,EAAO,MAAMA,EAEjB,OAAO8D,EQzKaC,GADG,EAGK3B,mBAAiB,GAHtB,mBAGhBC,EAHgB,KAGRC,EAHQ,KAKjB0B,EAAiB,uCAAG,sBAAAjD,EAAA,+EACjB0B,KAAKC,UADY,2CAAH,qDAIvBH,qBAAU,WACR,IACE,GAAIF,EAAS,GACX,MAAM,IAAIP,MAAM,0BAEhBQ,EAAUD,GAEZ,MAAOrC,GACP4D,EAAY5D,MAEb,CAACqC,EAAQuB,IAUZ,OAAQ,gCACN,6CAAgBvB,KAChB,wBAAQG,QAVU,WAClB,IAAMH,EAASI,KAAKC,SACpBJ,EAAUD,GACV2B,IAAoBC,MAAK,SAAA5B,GACvBC,EAAUD,OAMZ,+CCJW6B,EAzBgB,WAAO,IAAD,EACH9B,oBAAS,GADN,mBAC5BQ,EAD4B,KAClBC,EADkB,KAcnC,OACE,cAAC,EAAD,CACEpB,kBAAmBqB,EACnBnC,QAdY,SAACX,GAEfgC,QAAQC,IAAIjC,GACZ6C,GAAY,IAYVtC,QATY,WACdyB,QAAQC,IAAI,wCACZY,GAAY,IAIZ,SAKKD,EAA4B,KAAjB,cAAC,EAAD,OCQLuB,MAzBf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,8DACA,iDACA,cAAC,EAAD,IAEA,uDACA,cAACC,EAAD,IAEA,0DACA,cAAC,EAAD,IAEA,kDACA,cAACC,EAAD,IAEA,0DACA,cAAC,EAAD,IAEA,wDACA,cAAC,EAAD,QCdSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.14bb0253.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n// 出错后显示的元素类型\ntype FallbackElement = React.ReactElement<unknown, string | React.FC | typeof React.Component> | null;\nexport declare function FallbackRender(props: FallbackProps): FallbackElement;\n// 出错显示组件的 props\nexport interface FallbackProps {\n  error: Error;\n  resetErrorBoundary?: () => void; // fallback 组件里将该函数绑定到“重置”按钮\n}\n\ninterface ErrorBoundaryPropsWithFallback {\n  fallback?: FallbackElement;\n  resetKeys?: Array<unknown>;\n  onResetKeysChange?: (\n    prevResetKey: Array<unknown> | undefined,\n    resetKeys: Array<unknown> | undefined,\n  ) => void;\n  onError?: (error: Error, info: string) => void;\n  onReset?: (...args: Array<unknown>) => void;\n  FallbackComponent?: React.ComponentType<FallbackProps>; // Fallback 组件\n  fallbackRender?: typeof FallbackRender; // 渲染 fallback 元素的函数\n}\n\ntype ErrorBoundaryProps = ErrorBoundaryPropsWithFallback;\n\ntype ErrorBoundaryState = {\n  error: Error | null;\n};\n\n// 检查 resetKeys 是否有变化\nconst changedArray = (a: Array<unknown> = [], b: Array<unknown> = []) => {\n  return a.length !== b.length || a.some((item, index) => !Object.is(item, b[index]));\n}\n\nconst initState: ErrorBoundaryState = { error: null };\n\nclass ErrorBoundary extends React.Component<\n  React.PropsWithChildren<ErrorBoundaryProps>,\n  ErrorBoundaryState\n> {\n  updatedWithError: boolean;\n  constructor(props: ErrorBoundaryProps | Readonly<ErrorBoundaryProps>) {\n    super(props);\n    this.state = initState;\n    this.updatedWithError = false;\n  }\n\n  /**\n   * getDerivedStateFromError() 会在渲染阶段调用，因此不允许出现副作用。\n   * 如遇此类情况，请改用 componentDidCatch()。\n   * 某些错误，错误边界组件无法捕获\n   * @static\n   * @param {Error} error\n   * @returns \n   * @memberof ErrorBoundary\n   */\n  static getDerivedStateFromError(error: Error) {\n    console.log(error);\n\n    return { error }\n  }\n\n  /**\n   * 某些错误，错误边界组件无法捕获\n   * 1.组件的自身错误\n   * 2.异步错误，比如计时器\n   * 3.事件中的错误，比如click事件中发生的错误\n   * 4.服务端渲染\n   */\n  componentDidCatch(error: Error, errorInfo: any) {\n    // 你同样可以将错误日志上报给服务器\n    this.props.onError?.(error, errorInfo)\n  }\n\n  componentDidUpdate(prevProps: Readonly<React.PropsWithChildren<ErrorBoundaryProps>>) {\n    const { error } = this.state;\n    const { resetKeys, onResetKeysChange } = this.props;\n    if (error !== null && !this.updatedWithError) {\n      this.updatedWithError = true;\n      return;\n    }\n\n    // 已经存在错误，并且是普通的组件 render，则检查 resetKeys 是否有改动，改了就重置\n    if (error !== null && changedArray(prevProps.resetKeys, resetKeys)) {\n      onResetKeysChange?.(prevProps.resetKeys, resetKeys);\n      this.reset();\n    }\n  }\n\n  // 重置组件状态\n  reset = () => {\n    this.updatedWithError = false;\n    this.setState(initState);\n  }\n\n  // 自定义重置逻辑\n  resetErrorBoundary = () => {\n    this.props.onReset?.();\n    this.reset();\n  }\n\n  render() {\n    const { fallback, FallbackComponent, fallbackRender } = this.props;\n    const { error } = this.state;\n\n    if (error) {\n      const fallbackProps: FallbackProps = {\n        error,\n        resetErrorBoundary: this.resetErrorBoundary,  // 将 resetErrorBoundary 传入 fallback\n      }\n\n      // 判断 fallback 是否为合法的 Element\n      if (React.isValidElement(fallback)) {\n        return fallback;\n      }\n\n      // 判断 render 是否为函数\n      if (typeof fallbackRender === 'function') {\n        return fallbackRender(fallbackProps);\n      }\n\n      // 判断是否存在 FallbackComponent\n      if (FallbackComponent) {\n        return <FallbackComponent {...fallbackProps} />;\n      }\n\n      throw new Error('ErrorBoundary 组件需要传入 fallback, fallbackRender, FallbackComponent 其中一个');\n    }\n\n    return this.props.children;\n  }\n}\n\n/**\n * 封装成高阶组件\n * @template P\n * @param {React.ComponentType<P>} Component\n * @param {ErrorBoundaryProps} errorBoundaryProps\n * @returns {React.ComponentType<P>}\n */\nfunction withErrorBoundary<P>(\n  Component: React.ComponentType<P>,\n  errorBoundaryProps: ErrorBoundaryProps\n): React.ComponentType<P> {\n  const Wrapped: React.ComponentType<P> = props => {\n    return (\n      <ErrorBoundary {...errorBoundaryProps}>\n        <Component {...props} />\n      </ErrorBoundary>\n    )\n  }\n\n  // DevTools 显示的组件名\n  const name = Component.displayName || Component.name || 'Unknown';\n  Wrapped.displayName = `withErrorBoundary(${name})`;\n\n  return Wrapped;\n}\n\n/**\n * 开发者手动抛出错误\n * @template P\n * @param {(P | null | undefined)} [givenError]\n * @returns {(React.Dispatch<React.SetStateAction<P | null>>)}\n */\nfunction useErrorHandler<P = Error>(\n  givenError?: P | null | undefined,\n): React.Dispatch<React.SetStateAction<P | null>> {\n  const [error, setError] = useState<P | null>(null);\n  if (givenError) throw givenError; // 初始有错误时，直接抛出\n  if (error) throw error; // 后来再有错误，也直接抛出\n\n  return setError;\n}\n\nexport { ErrorBoundary, withErrorBoundary, useErrorHandler }\n","import { useState, useEffect } from 'react';\n\nconst MakeError = () => {\n  const [number, setNumber] = useState<number | null>(null);\n  const handleClick = () => {\n    const number = Math.random();\n    setNumber(number);\n  };\n\n  useEffect(() => {\n    // click 事件中的error getDerivedStateFromError 无法捕获\n    if (number && number > 0.5) {\n      throw new Error('大于0.5');\n    }\n  }, [number]);\n\n  return (\n    <div>\n      <h3>MakeError  {number}</h3>\n      <button onClick={handleClick}>随机触发Error</button>\n      <hr />\n    </div>\n  );\n};\n\nexport default MakeError;\n","import React, { useState } from 'react';\nimport { ErrorBoundary } from '../../lib/ErrorBoundary';\nimport MakeError from '../Error/MakeError';\n\nconst FallbackExample = () => {\n  const [hasError, setHasError] = useState(false);\n\n  const onError = (error: Error) => {\n    // 日志上報\n    console.log(error);\n    setHasError(true);\n  };\n\n  const onReset = () => {\n    console.log('尝试恢复错误');\n    setHasError(false);\n  };\n\n  return (\n    <ErrorBoundary\n      fallback={<div>出错啦</div>}\n      onError={onError}\n      onReset={onReset}\n    >\n      {/* 123 */}\n      {!hasError ? <MakeError /> : null}\n    </ErrorBoundary>\n  );\n};\n\nexport default FallbackExample;\n","import React from 'react';\nimport { FallbackProps } from './lib/ErrorBoundary';\n\n/**\n * 出错后现时的组件\n * @param error\n * @param resetErrorBoundary\n * @constructor\n */\nexport const ErrorFallback = ({ error, resetErrorBoundary }: FallbackProps) => {\n  return (\n    <div role=\"alert\">\n      <p>出错啦</p>\n      <pre>{error.message}</pre>\n      <button onClick={resetErrorBoundary}>点击重置状态</button>\n    </div>\n  )\n}","import React, { useState } from 'react';\nimport { ErrorBoundary } from '../../lib/ErrorBoundary';\nimport MakeError from '../Error/MakeError';\nimport { ErrorFallback } from '../../utils'\n\nconst FallbackExample = () => {\n  const [hasError, setHasError] = useState(false);\n\n  const onError = (error: Error) => {\n    // 日志上報\n    console.log(error);\n    setHasError(true);\n  };\n\n  const onReset = () => {\n    console.log('尝试恢复错误');\n    setHasError(false);\n  };\n\n  return (\n    <ErrorBoundary\n      fallbackRender={(fallbackProps) => <ErrorFallback {...fallbackProps} />}\n      onError={onError}\n      onReset={onReset}\n    >\n      {/* 123 */}\n      {!hasError ? <MakeError /> : null}\n    </ErrorBoundary>\n  );\n};\n\nexport default FallbackExample;\n","import React, { useState } from 'react';\nimport { ErrorBoundary } from '../../lib/ErrorBoundary';\nimport MakeError from '../Error/MakeError';\nimport { ErrorFallback } from '../../utils'\n\nconst FallbackComponentExample = () => {\n  const [hasError, setHasError] = useState(false);\n\n  const onError = (error: Error) => {\n    // 日志上報\n    console.log(error);\n    setHasError(true);\n  };\n\n  const onReset = () => {\n    console.log('尝试恢复错误');\n    setHasError(false);\n  };\n\n  return (\n    <ErrorBoundary\n      fallbackRender={ErrorFallback}\n      onError={onError}\n      onReset={onReset}\n    >\n      {/* 123 */}\n      {!hasError ? <MakeError /> : null}\n    </ErrorBoundary>\n  );\n};\n\nexport default FallbackComponentExample;\n","import React, { useState } from 'react';\nimport MakeError from '../Error/MakeError';\nimport { ErrorFallback } from '../../utils';\nimport { ErrorBoundary } from '../../lib/ErrorBoundary';\n\nconst FallbackExample = () => {\n  const [retry, setRetry] = useState<number>(0);\n\n  return (\n    <div>\n      <button onClick={() => setRetry(retry + 1)}>resetKeys to retry</button>\n\n      <ErrorBoundary\n        FallbackComponent={ErrorFallback}\n        resetKeys={[retry]}\n      >\n        <MakeError />\n      </ErrorBoundary>\n    </div>\n  )\n};\n\nexport default FallbackExample;","\nimport React from 'react';\nimport MakeError from '../Error/MakeError';\nimport {ErrorFallback} from '../../utils';\nimport {withErrorBoundary} from '../../lib/ErrorBoundary';\n\nconst WithErrorBoundaryExample = withErrorBoundary(MakeError, {\n  FallbackComponent: ErrorFallback,\n  onError: (error, info) => console.log(error, info),\n});\n\nexport default WithErrorBoundaryExample;","import { useEffect, useState } from 'react';\nimport { useErrorHandler } from '../../lib/ErrorBoundary';\n\nconst AsyncError = () => {\n  const handleError = useErrorHandler();\n\n  const [number, setNumber] = useState<number>(0);\n\n  const randomlyFetchData = async () => {\n    return Math.random();\n  }\n\n  useEffect(() => {\n    try {\n      if (number > 0.5) {\n        throw new Error('async 大于 0.5');\n      } else {\n        setNumber(number);\n      }\n    } catch (error) {\n      handleError(error)\n    }\n  }, [number, handleError]);\n\n  const handleClick = () => {\n    const number = Math.random();\n    setNumber(number);\n    randomlyFetchData().then(number => {\n      setNumber(number);\n    });\n  };\n\n  return (<div>\n    <h3>MakeError  {number}</h3>\n    <button onClick={handleClick}>随机触发Error</button>\n  </div>)\n}\n\nexport default AsyncError;\n","import React, { useState } from 'react';\nimport { ErrorFallback } from '../../utils';\nimport { ErrorBoundary } from '../../lib/ErrorBoundary';\nimport AsyncError from '../Error/AsyncError';\n\nconst UseErrorHandlerExample = () => {\n  const [hasError, setHasError] = useState(false);\n\n  const onError = (error: Error) => {\n    // 日志上報\n    console.log(error);\n    setHasError(true);\n  }\n\n  const onReset = () => {\n    console.log('尝试恢复错误');\n    setHasError(false);\n  }\n\n  return (\n    <ErrorBoundary\n      FallbackComponent={ErrorFallback}\n      onError={onError}\n      onReset={onReset}\n    >\n      { !hasError ? <AsyncError /> : null}\n    </ErrorBoundary>\n  )\n};\n\nexport default UseErrorHandlerExample;","import React from 'react';\nimport FallbackExample from './components/Example/FallbackExample';\nimport FallbackRenderExample from './components/Example/FallbackRenderExample';\nimport FallbackComponentExample from './components/Example/FallbackComponentExample';\nimport ResetKeysExample from './components/Example/ResetKeysExample';\nimport WithErrorBoundaryExample from './components/Example/WithErrorBoundaryExample';\nimport UseErrorHandlerExample from './components/Example/UseErrorHandlerExample';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <h2>React-Error-Boundary example</h2>\n      <h3>FallbackExample</h3>\n      <FallbackExample />\n\n      <h3>FallbackRenderExample</h3>\n      <FallbackRenderExample />\n\n      <h3>FallbackComponentExample</h3>\n      <FallbackComponentExample />\n\n      <h3>ResetKeysExample</h3>\n      <ResetKeysExample />\n\n      <h3>WithErrorBoundaryExample</h3>\n      <WithErrorBoundaryExample />\n\n      <h3>UseErrorHandlerExample</h3>\n      <UseErrorHandlerExample />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}